#######################################################################################################################
# DATA: 24/07/2020
# DISCIPLINA: PGM848 - VISÃO COMPUTACIONAL NO MELHORAMENTO DE PLANTAS
# PROFESSOR: VINÍCIUS QUINTÃO CARNEIRO
# ESTUDANTE: LORENA CAROLINE DUMBA SILVA
# GITHUB: LorenaDumba
########################################################################################################################

import numpy as np

print("REO 1")

print("Exercício 3")


print("a) Crie uma função em um arquivo externo (outro arquivo .py) para calcular a média e a variância amostral um vetor qualquer, baseada em um loop (for).")
print('A função esta no arquivo FUNCTION_4')

print("")
print("---------------------------------------------------------------------------------------------------------------")
print("")



print("b) Simule três arrays com a biblioteca numpy de 10, 100, e 1000 valores e com distribuição normal com média 100 e variância 2500. Pesquise na documentação do numpy por funções de simulação.")

print("Valores de 10, 100, e 1000 amostras")

#np.set_printoptions(precision=2)
#np.set_printoptions(suppress=True)

import numpy as np
dados_10= np.random.normal(loc=100, scale=50, size=10)
print("Vetor de 10 amostras aleatórias com media 100 e variancia de 2500: ", dados_10)

print("")
print("---------------------------------------------------------------------------------------------------------------")
print("")

dados_100 = np.random.normal(loc=100, scale=50, size=100)

print("Vetor 100 amostras aleatórias com media 100 e variancia de 2500: ", dados_100)

print("")
print("------------------------------------------------------------------------------")
print("")

dados_1000 = np.random.normal(loc=100, scale=50, size=1000)
print("Vetor 1000 amostras aleatórias com media 100 e variancia de 2500: ", dados_1000)

print("")
print("---------------------------------------------------------------------------------------------------------------")
print("")


print("c) Utilize a função criada na letra a para obter as médias e variâncias dos vetores simulados na letra b.")

from function_4 import media
from function_4 import variancia

print("Conjunto de dados com 10 amostras")

print("media ", media(dados_10))
print("variancia ", variancia(dados_10))

print("------------------------------------")

print("Conjunto de dados com 100 amostras")
print("media ", media(dados_100))
print("variancia ", variancia(dados_100))

print("------------------------------------")

print("Conjunto de dados com 1000 amostras")
print("media ", media(dados_1000))
print("variancia ", variancia(dados_1000))

print("")
print("---------------------------------------------------------------------------------------------------------------")
print("")


print("d) Crie histogramas com a biblioteca matplotlib dos vetores simulados com valores de 10, 100, 1000 e 100000.")
dados_100000 = np.random.normal(loc=100, scale=50, size=100000)

#nl1,nc1=dados_10.shape
#nl2,nc2=dados_100.shape
#nl3,nc3=dados_1000.shape
#nl4,nc4=dados_100000.shape
#fig=plt.figure("Gráfico Histograma")
#plt.hist

import matplotlib.pyplot as plt
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

#histogra_exemplo = plt.hist(dados_1000, bins=15)#para plotar com uma unica cor(azul)
#plt.hist(dados_10, bins=15)
#plt.hist(dados_100, bins=15)
#plt.hist(dados_1000, bins=15)
#plt.hist(dados_100000, bins=15)

fig, axs = plt.subplots(1, tight_layout=True)
N, bins, patches = axs.hist(dados_10, bins=5)
fracs = N / N.max()

norm = colors.Normalize(fracs.min(), fracs.max())

for thisfrac, thispatch in zip(fracs, patches):
    color = plt.cm.viridis(norm(thisfrac))
    thispatch.set_facecolor(color)
plt.title('Histograma 10')
plt.xlabel('Número de elementos na classe')
plt.ylabel('Valor médio da classe')


fig, axs = plt.subplots(1, tight_layout=True)
N, bins, patches = axs.hist(dados_100, bins=10)
fracs = N / N.max()

norm = colors.Normalize(fracs.min(), fracs.max())

for thisfrac, thispatch in zip(fracs, patches):
    color = plt.cm.viridis(norm(thisfrac))
    thispatch.set_facecolor(color)
plt.title('Histograma 100')
plt.xlabel('Número de elementos na classe')
plt.ylabel('Valor médio da classe')


fig, axs = plt.subplots(1, tight_layout=True)
N, bins, patches = axs.hist(dados_1000, bins=15)
fracs = N / N.max()

norm = colors.Normalize(fracs.min(), fracs.max())

for thisfrac, thispatch in zip(fracs, patches):
    color = plt.cm.viridis(norm(thisfrac))
    thispatch.set_facecolor(color)
plt.title('Histograma 1000')
plt.xlabel('Número de elementos na classe')
plt.ylabel('Valor médio da classe')


fig, axs = plt.subplots(1, tight_layout=True)

N, bins, patches = axs.hist(dados_100000, bins=70)

fracs = N / N.max()

norm = colors.Normalize(fracs.min(), fracs.max())

# Now, we'll loop through our objects and set the color of each accordingly

for thisfrac, thispatch in zip(fracs, patches):
    color = plt.cm.viridis(norm(thisfrac))
    thispatch.set_facecolor(color)
plt.title('Histograma 100000')
plt.xlabel('Número de elementos na classe')
plt.ylabel('Valor')
plt.show()
